import type { Collection, Operation, Server } from '@scalar/oas-utils/entities/spec';
import type { TransformedOperation } from '@scalar/types/legacy';
type __VLS_Props = {
    operation: Operation;
    server: Server | undefined;
    collection: Collection;
    /** Show a simplified card if no example are available */
    fallback?: boolean;
    /** @deprecated Use `operation` instead */
    transformedOperation: TransformedOperation;
};
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        header?(_: {}): any;
        header?(_: {}): any;
        footer?(_: {}): any;
        footer?(_: {}): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=ExampleRequest.vue.d.ts.map