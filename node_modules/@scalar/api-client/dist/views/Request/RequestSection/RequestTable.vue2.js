import { defineComponent as I, resolveComponent as z, openBlock as d, createBlock as p, withCtx as n, createVNode as t, createElementVNode as s, createTextVNode as w, createElementBlock as m, Fragment as f, renderList as D, normalizeClass as V, unref as i, toDisplayString as x, createCommentVNode as g } from "vue";
import { ScalarTooltip as E, ScalarIcon as B, ScalarButton as q } from "@scalar/components";
import R from "../../../components/CodeInput/CodeInput.vue.js";
import G from "../../../components/DataTable/DataTable.vue.js";
import v from "../../../components/DataTable/DataTableCell.vue.js";
import N from "../../../components/DataTable/DataTableCheckbox.vue.js";
import k from "../../../components/DataTable/DataTableHeader.vue.js";
import C from "../../../components/DataTable/DataTableRow.vue.js";
import { parameterIsInvalid as P, hasItemProperties as h } from "../libs/request.js";
import j from "./RequestTableTooltip.vue.js";
const L = { class: "contents" }, O = { class: "sr-only" }, A = { class: "text-c-2 filemask flex w-full max-w-[100%] items-end justify-end overflow-hidden p-1" }, K = ["onClick"], H = {
  key: 1,
  class: "p-0.5"
}, oe = /* @__PURE__ */ I({
  __name: "RequestTable",
  props: {
    items: {},
    hasCheckboxDisabled: { type: Boolean, default: !1 },
    showUploadButton: { type: Boolean, default: !1 },
    isGlobal: { type: Boolean, default: !1 },
    isReadOnly: { type: Boolean, default: !1 },
    environment: {},
    envVariables: {},
    workspace: {},
    invalidParams: {}
  },
  emits: ["updateRow", "toggleRow", "addRow", "deleteRow", "inputFocus", "inputBlur", "uploadFile", "removeFile"],
  setup(F, { emit: U }) {
    const b = F, r = U, S = ["", "", "36px"], y = (a, e, c) => {
      r("updateRow", a, e, c);
    }, _ = (a) => {
      r("uploadFile", a);
    }, $ = (a) => Array.isArray(a.default) && a.default.length === 1 ? a.default[0] : a.default;
    return (a, e) => {
      const c = z("RouterLink");
      return d(), p(G, {
        class: "group/table flex-1",
        columns: S
      }, {
        default: n(() => [
          t(C, { class: "sr-only !block" }, {
            default: n(() => [
              t(k, null, {
                default: n(() => e[4] || (e[4] = [
                  s("span", { class: "sr-only" }, "Enabled", -1)
                ])),
                _: 1
              }),
              t(k, null, {
                default: n(() => e[5] || (e[5] = [
                  w("Key")
                ])),
                _: 1
              }),
              t(k, null, {
                default: n(() => e[6] || (e[6] = [
                  w("Value")
                ])),
                _: 1
              })
            ]),
            _: 1
          }),
          (d(!0), m(f, null, D(a.items, (l, u) => (d(), p(C, {
            id: l.key,
            key: u,
            class: V({
              alert: i(P)(l).value,
              error: a.invalidParams && a.invalidParams.has(l.key)
            })
          }, {
            default: n(() => [
              s("label", L, [
                a.isGlobal ? (d(), p(c, {
                  key: 0,
                  class: "!border-r-1/2 border-t-1/2 text-c-2 flex items-center justify-center",
                  to: l.route ?? {}
                }, {
                  default: n(() => [
                    e[8] || (e[8] = s("span", { class: "sr-only" }, "Global", -1)),
                    t(i(E), {
                      as: "div",
                      side: "top"
                    }, {
                      trigger: n(() => [
                        t(i(B), {
                          class: "text-c-1",
                          icon: "Globe",
                          size: "xs"
                        })
                      ]),
                      content: n(() => e[7] || (e[7] = [
                        s("div", { class: "w-content bg-b-1 text-xxs text-c-1 z-100 pointer-events-none z-10 grid max-w-[320px] gap-1.5 rounded p-2 leading-5 shadow-lg" }, [
                          s("div", { class: "text-c-1 flex items-center" }, [
                            s("span", { class: "text-pretty" }, " Global cookies are shared across the whole workspace. ")
                          ])
                        ], -1)
                      ])),
                      _: 1
                    })
                  ]),
                  _: 2
                }, 1032, ["to"])) : (d(), m(f, { key: 1 }, [
                  s("span", O, " Row " + x(l.enabled ? "Enabled" : "Disabled"), 1),
                  t(N, {
                    class: "!border-r-1/2",
                    disabled: b.hasCheckboxDisabled,
                    modelValue: l.enabled,
                    "onUpdate:modelValue": (o) => r("toggleRow", u, o)
                  }, null, 8, ["disabled", "modelValue", "onUpdate:modelValue"])
                ], 64))
              ]),
              t(v, null, {
                default: n(() => [
                  t(R, {
                    disableCloseBrackets: "",
                    disabled: b.isReadOnly,
                    disableEnter: "",
                    disableTabIndent: "",
                    envVariables: a.envVariables,
                    environment: a.environment,
                    modelValue: l.key,
                    placeholder: "Key",
                    required: !!l.required,
                    workspace: a.workspace,
                    onBlur: e[0] || (e[0] = (o) => r("inputBlur")),
                    onFocus: e[1] || (e[1] = (o) => r("inputFocus")),
                    onSelectVariable: (o) => y(u, "key", o),
                    "onUpdate:modelValue": (o) => r("updateRow", u, "key", o)
                  }, null, 8, ["disabled", "envVariables", "environment", "modelValue", "required", "workspace", "onSelectVariable", "onUpdate:modelValue"])
                ]),
                _: 2
              }, 1024),
              t(v, null, {
                default: n(() => [
                  t(R, {
                    class: V({
                      "pr-6": i(h)(l)
                    }),
                    default: l.default,
                    disableCloseBrackets: "",
                    disabled: b.isReadOnly,
                    disableEnter: "",
                    disableTabIndent: "",
                    enum: l.enum ?? [],
                    envVariables: a.envVariables,
                    environment: a.environment,
                    examples: l.examples ?? [],
                    max: l.maximum,
                    min: l.minimum,
                    modelValue: l.value,
                    nullable: !!l.nullable,
                    placeholder: "Value",
                    type: l.type,
                    workspace: a.workspace,
                    onBlur: e[2] || (e[2] = (o) => r("inputBlur")),
                    onFocus: e[3] || (e[3] = (o) => r("inputFocus")),
                    onSelectVariable: (o) => y(u, "value", o),
                    "onUpdate:modelValue": (o) => r("updateRow", u, "value", o)
                  }, {
                    icon: n(() => [
                      i(h)(l) ? (d(), p(j, {
                        key: 0,
                        item: { ...l, default: $(l) }
                      }, null, 8, ["item"])) : g("", !0)
                    ]),
                    _: 2
                  }, 1032, ["class", "default", "disabled", "enum", "envVariables", "environment", "examples", "max", "min", "modelValue", "nullable", "type", "workspace", "onSelectVariable", "onUpdate:modelValue"])
                ]),
                _: 2
              }, 1024),
              a.showUploadButton ? (d(), p(v, {
                key: 0,
                class: "group/upload flex items-center justify-center whitespace-nowrap"
              }, {
                default: n(() => {
                  var o;
                  return [
                    l.file ? (d(), m(f, { key: 0 }, [
                      s("div", A, [
                        s("span", null, x((o = l.file) == null ? void 0 : o.name), 1)
                      ]),
                      s("button", {
                        class: "bg-b-2 centered-x centered-y absolute hidden w-[calc(100%_-_8px)] rounded p-0.5 text-center text-xs font-medium group-hover/upload:block",
                        type: "button",
                        onClick: (T) => r("removeFile", u)
                      }, " Delete ", 8, K)
                    ], 64)) : (d(), m("div", H, [
                      t(i(q), {
                        class: "bg-b-2 hover:bg-b-3 text-c-2 h-fit border-0 py-px shadow-none",
                        size: "sm",
                        variant: "outlined",
                        onClick: (T) => _(u)
                      }, {
                        default: n(() => [
                          e[9] || (e[9] = s("span", null, "Upload File", -1)),
                          t(i(B), {
                            class: "ml-1",
                            icon: "UploadSimple",
                            size: "xs",
                            thickness: "2.5"
                          })
                        ]),
                        _: 2
                      }, 1032, ["onClick"])
                    ]))
                  ];
                }),
                _: 2
              }, 1024)) : g("", !0)
            ]),
            _: 2
          }, 1032, ["id", "class"]))), 128))
        ]),
        _: 1
      });
    };
  }
});
export {
  oe as default
};
